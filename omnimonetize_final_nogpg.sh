cat > ~/omnimonetize_final_nogpg.sh <<'EOF'
#!/usr/bin/env bash

set -euo pipefail

ROOT="${HOME}/monetize-tmp"
LOG="${ROOT}/omnimonetize.jsonl"
MAXJOBS=5

case "$OSTYPE" in
  linux-android*) CLIP="termux-clipboard-set" ;;
  darwin*)        CLIP="pbcopy" ;;
  linux*)         CLIP="xclip -selection clipboard" ;;
  *)              CLIP="cat > /dev/null" ;;
esac

command -v jq >/dev/null || { echo "jq is required"; exit 1; }

echo "=== SHROOMTOP420â„¢ OMNIMONETIZE FINAL (No GPG, Stripe v2025-06-01) ==="
read -p "GitHub Username: " GHUSER
read -sp "GitHub PAT (repo+workflow+write:discussion): " GHPAT
echo

API="https://api.github.com"
export GHUSER GHPAT
export LOG

mkdir -p "$ROOT"
> "$LOG"

MON_BLOCK='<!-- SHROOMTOP420-MONETIZATION-BLOCK-START -->
## ðŸš€ Support & Commercial Use

- **Buy full-access or commercial license:** [Pay with Stripe](https://buy.stripe.com/aFa6oHeG74DQ8ZB3LubQY01)
- **Donate or support ongoing dev:** [Buy Me A Coffee](https://buymeacoffee.com/shroomtop420)

> *Commercial use requires license. See LICENSE for terms.*
<!-- SHROOMTOP420-MONETIZATION-BLOCK-END -->'

MIT_SIG="MIT License"
MIT_SPDX="SPDX-License-Identifier: MIT"

export GIT_ASKPASS="${ROOT}/askpass.sh"
echo -e "#!/usr/bin/env bash\necho \$GHPAT" > "$GIT_ASKPASS"
chmod 700 "$GIT_ASKPASS"

detect_license() {
  for f in LICENSE LICENSE.md LICENSE.txt; do
    [ -f "$f" ] || continue
    if grep -Eqi "$MIT_SPDX|MIT License" "$f"; then
      echo "MIT"
      return 0
    else
      echo "CUSTOM"
      return 1
    fi
  done
  echo "NONE"
  return 2
}

detect_readme() {
  shopt -s nocaseglob
  for r in README.md README.rst README.markdown readme.md readme.rst ReadMe.md; do
    [ -f "$r" ] && echo "$r" && return
  done
  for f in *; do
    [[ "${f,,}" == "readme"* ]] && echo "$f" && return
  done
  shopt -u nocaseglob
  echo ""
}

patch_readme() {
  local file="$1"
  sed -i "/SHROOMTOP420-MONETIZATION-BLOCK-START/,/SHROOMTOP420-MONETIZATION-BLOCK-END/d" "$file"
  printf "\n%s\n" "$MON_BLOCK" >> "$file"
}

open_pr() {
  local repo="$1" branch="$2" base="$3"
  PR_TITLE="Automated Monetization Patch"
  PR_BODY="Adds Stripe, BuyMeACoffee, and commercial license block. Auto-generated by SHROOMTOP420â„¢ OMNIMONETIZE."
  curl -s -u "$GHUSER:$GHPAT" -X POST "$API/repos/$GHUSER/$repo/pulls" \
    -d "{\"title\":\"$PR_TITLE\",\"head\":\"$branch\",\"base\":\"$base\",\"body\":\"$PR_BODY\",\"labels\":[\"automation\",\"monetization\"]}"
}

fire_webhook() {
  local repo="$1" sha="$2" status="$3"
  [ -z "${WEBHOOK_URL:-}" ] && return
  curl -s -X POST -d "{\"repo\":\"$repo\",\"sha\":\"$sha\",\"status\":\"$status\"}" "$WEBHOOK_URL"
}

worker() {
  local url="$1"
  local t0=$(date +%s)
  REPO=$(basename "$url" .git)
  cd "$ROOT"
  rm -rf "$REPO"
  GIT_TERMINAL_PROMPT=0 GIT_ASKPASS="$GIT_ASKPASS" git clone --quiet --depth 1 "$url" "$REPO" || { echo "{\"repo\":\"$REPO\",\"error\":\"clone failed\"}" >> "$LOG"; return; }
  cd "$REPO"

  readme=$(detect_readme)
  [ -n "$readme" ] || { echo "# $REPO" > README.md; readme="README.md"; }
  patch_readme "$readme"

  licstat=$(detect_license)
  case $licstat in
    MIT) ;; # No action
    CUSTOM) echo "{\"repo\":\"$REPO\",\"warn\":\"custom license detected, skipped\"}" >> "$LOG" ;;
    NONE) echo "$MIT_SIG\n\nCopyright (c) 2025 Shroomtop420â„¢\n\n$MIT_SPDX\n" > LICENSE ;;
  esac

  git add "$readme" LICENSE* 2>/dev/null || true
  pre_sha=$(git rev-parse HEAD)
  GIT_COMMITTER_NAME="Shroomtop420" GIT_COMMITTER_EMAIL="bot@shroomtop420.com" \
    git commit -am "Automated monetization patch (Stripe v2025-06-01, BuyMeACoffee, idempotent, MIT-respect)" || true
  base_branch=$(git rev-parse --abbrev-ref HEAD)
  if git push --quiet; then
    post_sha=$(git rev-parse HEAD)
    fire_webhook "$REPO" "$post_sha" "push"
    echo "{\"repo\":\"$REPO\",\"pre_sha\":\"$pre_sha\",\"post_sha\":\"$post_sha\",\"duration\":$(( $(date +%s) - t0 )),\"result\":\"push-ok\"}" >> "$LOG"
  else
    branch="monetize-$(date +%s)-$RANDOM"
    git checkout -b "$branch"
    git push origin "$branch"
    pr=$(open_pr "$REPO" "$branch" "$base_branch")
    fire_webhook "$REPO" "$branch" "pr"
    echo "{\"repo\":\"$REPO\",\"branch\":\"$branch\",\"duration\":$(( $(date +%s) - t0 )),\"result\":\"pr-opened\",\"pr_url\":$(echo $pr | jq -r .html_url)}" >> "$LOG"
  fi
  git config --unset-all credential.helper || true
  cd "$ROOT"
}

page=1
repos=()
while :; do
    RESP=$(curl -s -H "Authorization: token $GHPAT" "$API/user/repos?per_page=100&page=$page")
    if echo "$RESP" | jq 'type' | grep -q '"object"'; then
        echo "ERROR: $(echo "$RESP" | jq -r '.message')"
        exit 1
    fi
    names=$(echo "$RESP" | jq -r '.[].ssh_url')
    [ -z "$names" ] && break
    repos+=($names)
    [ $(echo "$RESP" | jq 'length') -lt 100 ] && break
    ((page++))
done

if [ ${#repos[@]} -eq 0 ]; then
    echo "No repositories found or authentication failed."
    exit 1
fi

export -f worker patch_readme detect_license detect_readme open_pr fire_webhook
export MON_BLOCK MIT_SIG MIT_SPDX ROOT LOG GIT_ASKPASS GHPAT GHUSER API

printf "%s\n" "${repos[@]}" | xargs -n1 -P $MAXJOBS -I{} bash -c 'worker "$@"' _ {}

cat "$LOG" | $CLIP || echo "Clipboard unavailable: $LOG"
echo "âœ“ Monetization audit complete. Structured log copied to clipboard (if supported)."

rm -f "$GIT_ASKPASS"

for url in "${repos[@]}"; do
  REPO=$(basename "$url" .git)
  [ -d "$ROOT/$REPO" ] || continue
  if [ -f "$ROOT/$REPO/.gitmodules" ]; then
    echo "{\"repo\":\"$REPO\",\"warn\":\"SUBMODULES_PRESENT\",\"action\":\"manual review recommended\"}" >> "$LOG"
  fi
done

EOF

chmod +x ~/omnimonetize_final_nogpg.sh
~/omnimonetize_final_nogpg.sh
